<?xml version="1.0"?>
<project name="webapp-ohmage" basedir="." default="dist-all">
  <property file="build.properties"/>
  <property name="library" location="lib"/>
  <property name="app_name" value="ohmage"/>
  <property name="app_version" value="2.14"/>
  <property name="src" location="src"/>
  <property name="test" location="test"/>
  <property name="view" location="view"/>
  <property name="resources" location="web"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  <property name="condition" location="condition"/>

  <fileset id="compile-dependencies" dir="${library}">
    <include name="log4j-1.2.16.jar"/>
    <include name="servlet-api-3.0.jar"/>
    <include name="org.springframework.beans-3.1.1.RELEASE.jar" />
    <include name="org.springframework.context-3.1.1.RELEASE.jar" />
    <include name="org.springframework.core-3.1.1.RELEASE.jar" />
    <include name="org.springframework.jdbc-3.1.1.RELEASE.jar" />
    <include name="org.springframework.transaction-3.1.1.RELEASE.jar" />
    <include name="org.springframework.web-3.1.1.RELEASE.jar" />
    <include name="commons-logging-1.1.1.jar"/>
    <include name="commons-dbcp-1.2.2.jar"/>
    <include name="commons-io-1.3.2.jar"/>
    <include name="commons-fileupload-1.2.2.jar"/>
    <include name="commons-pool-1.5.4.jar"/>
    <include name="cors-filter-1.3.1-ohmage.jar"/>
    <include name="json.org-2011-11-03.jar"/>
    <include name="jbcrypt-0.3.jar"/>
    <include name="xom-1.2.6.jar"/>
    <include name="mobility-classifier-1.3.7.jar"/>
    <include name="httpcore-4.1.2.jar"/>
    <include name="httpclient-4.1.2.jar"/>
    <include name="httpmime-4.1.2.jar"/>
    <include name="junit-4.10.jar"/>
    <include name="tomcat-coyote.jar"/>
    <include name="recaptcha4j-0.0.7.jar"/>
    <include name="mail.jar"/>
  	<include name="joda-time-2.1.jar"/>
    <include name="jackson-all-1.9.7.jar"/>
    <include name="js.jar"/>
    <include name="catalina-2012-09-10.jar"/>
    <include name="spring-security-oauth2-1.0.0.RC3.jar"/>

    <include name="amber-oauth2-authzserver-0.22-incubating.jar"/>
    <include name="amber-oauth2-common-0.22-incubating.jar"/>
    <include name="amber-oauth2-resourceserver-0.22-incubating.jar"/>
    <include name="slf4j-api-1.6.1.jar"/>
    <include name="jettison-1.2.jar"/>
  </fileset>

  <fileset id="run-dependencies" dir="${library}">
    <include name="log4j-1.2.16.jar"/>
    <include name="org.springframework.asm-3.1.1.RELEASE.jar" />
    <include name="org.springframework.beans-3.1.1.RELEASE.jar" />
    <include name="org.springframework.context-3.1.1.RELEASE.jar" />
    <include name="org.springframework.core-3.1.1.RELEASE.jar" />
    <include name="org.springframework.expression-3.1.1.RELEASE.jar" />
    <include name="org.springframework.jdbc-3.1.1.RELEASE.jar" />
    <include name="org.springframework.transaction-3.1.1.RELEASE.jar" />
    <include name="org.springframework.web-3.1.1.RELEASE.jar" />
    <include name="mysql-connector-java-5.1.10-bin.jar"/>
    <include name="commons-logging-1.1.1.jar"/>
    <include name="commons-dbcp-1.2.2.jar"/>
    <include name="commons-io-1.3.2.jar"/>
    <include name="commons-fileupload-1.2.2.jar"/>
    <include name="commons-pool-1.5.4.jar"/>
    <include name="cors-filter-1.3.1-ohmage.jar"/>
    <include name="json.org-2011-11-03.jar"/>
    <include name="jbcrypt-0.3.jar"/>
    <include name="xom-1.2.6.jar"/>
    <include name="mobility-classifier-1.3.7.jar"/>
    <include name="recaptcha4j-0.0.7.jar"/>
    <include name="mail.jar"/>
    <include name="joda-time-2.1.jar"/>
  	<include name="jackson-all-1.9.7.jar"/>
    <include name="js.jar"/>

    <include name="spring-security-config-3.1.3.RELEASE.jar"/>
    <include name="spring-security-core-3.1.3.RELEASE.jar"/>
    <include name="spring-security-oauth2-1.0.0.RC3.jar"/>
    <include name="spring-security-openid-3.1.3.RELEASE.jar"/>
    <include name="spring-security-web-3.1.3.RELEASE.jar"/>
    <include name="spring-security-oauth2-1.0.0.RC3.jar"/>
    <include name="spring-security-acl-3.1.3.RELEASE.jar"/>
    <include name="spring-security-cas-3.1.3.RELEASE.jar"/>
    <include name="spring-security-crypto-3.1.3.RELEASE.jar"/>
    <include name="spring-security-ldap-3.1.3.RELEASE.jar"/>
    <include name="spring-security-remoting-3.1.3.RELEASE.jar"/>
    <include name="spring-security-taglibs-3.1.3.RELEASE.jar"/>

    <include name="amber-oauth2-authzserver-0.22-incubating.jar"/>
    <include name="amber-oauth2-common-0.22-incubating.jar"/>
    <include name="amber-oauth2-resourceserver-0.22-incubating.jar"/>
    <include name="slf4j-api-1.6.1.jar"/>
    <include name="jettison-1.2.jar"/>
  </fileset>

  <path id="compile-classpath">
    <fileset refid="compile-dependencies"/>
  </path>

  <path id="run-classpath">
    <fileset refid="run-dependencies"/>
  </path>
  
  <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
    <classpath path="${library}/sonar-ant-task-1.1.jar" /> 
  </taskdef>

  <target name="clean" description="Removes output directories (e.g. build and dist).">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="condition/gen"/>
    <delete file="web/WEB-INF/properties/system.properties"/>
  </target>

  <target name="javac" description="Compiles Java files.">
    <mkdir dir="${build}/classes"/>
    <javac destdir="${build}/classes" source="1.6" target="1.6"
          debug="true" deprecation="true" optimize="true" failonerror="true" 
          encoding="UTF-8">
      <compilerarg value="-Xlint:unchecked"/>
      <src path="${src}"/>
      <src path="${test}"/>
      <exclude name="org/ohmage/test"/>
      <classpath refid="compile-classpath"/>
    </javac>
  </target>
    
  <target name="javac-validator" description="Compiles Java files to create the campaign validator.">
    <mkdir dir="${build}/classes"/>
    <javac destdir="${build}/classes" source="1.6" target="1.6"
          debug="true" deprecation="true" optimize="true" failonerror="true" 
          encoding="UTF-8">
      <compilerarg value="-Xlint:unchecked"/>
      <src path="${src}"/>
      <include name="org/ohmage/config/**" />
      <include name="org/ohmage/util/StringUtils.java" />
      <classpath refid="compile-classpath"/>
    </javac>
  </target>
    
  <target name="javac-library" description="Compiles Java files to create the ohmage library.">
    <mkdir dir="${build}/classes"/>
    <javac destdir="${build}/classes" source="1.6" target="1.6"
          debug="true" deprecation="true" optimize="true" failonerror="true" 
          encoding="UTF-8" includeantruntime="false">
      <compilerarg value="-Xlint:unchecked"/>
      <src path="${src}"/>
      <include name="org/ohmage/domain/**" />
      <include name="org/ohmage/lib/**" />
      <include name="org/ohmage/util/**" />
      <include name="org/ohmage/exception/WorkflowException.java" />
      <include name="org/ohmage/exception/DomainException.java" />
      <exclude name="org/ohmage/domain/Audit.java" />
      <classpath refid="compile-classpath"/>
    </javac>
  </target>

  <target name="javadoc" description="Compiles Javadocs.">
    <mkdir dir="${build}/docs"/>
    <javadoc destdir="${build}/docs" private="true" link="http://java.sun.com/javase/6/docs/api/"
             encoding="UTF-8" additionalparam="-quiet">
      <fileset dir="${src}">
        <include name="**/*.java"/>
      </fileset>
       <classpath refid="compile-classpath"/>
    </javadoc>
  </target>
    
  <target name="javadoc-library" description="Compiles Javadocs for the library only.">
    <mkdir dir="${build}/docs"/>
    <javadoc destdir="${build}/docs" private="true" link="http://java.sun.com/javase/6/docs/api/"
             encoding="UTF-8" additionalparam="-quiet">
      <fileset dir="${src}">
        <include name="org/ohmage/domain/**" />
        <include name="org/ohmage/lib/**" />
        <include name="org/ohmage/util/**" />
        <include name="org/ohmage/annotator/**" />
        <include name="org/ohmage/exception/WorkflowException.java" />
        <include name="org/ohmage/exception/DomainException.java" />
        <exclude name="org/ohmage/domain/Audit.java" />
      </fileset>
      <classpath refid="compile-classpath"/>
    </javadoc>
  </target>
    
  <path id="classpath.test">
    <fileset refid="compile-dependencies"/>
    <pathelement location="${build}/classes"/>
  </path>
    
  <target name="test" depends="javac" description="Executes the JUnit tests.">
    <junit printsummary="yes" haltonfailure="yes">
      <classpath refid="classpath.test"/>
      <formatter type="plain" usefile="false" />

      <test name="org.ohmage.validator.ValidatorTests"/>
    </junit>
  </target>
    
  <target 
      name="condition-grammar" 
      description="Recompiles the condition grammar.">
    
    <!-- Make the directory to house the files as generate them. -->
    <property name="gen" location="${condition}/gen" />
    <mkdir dir="${gen}" />
    
    <!-- Annotate the condition grammar. -->
    <java fork="true" jar="${library}/jtb132.jar" failonerror="true">
      <arg value="-p" />
      <arg value="org.ohmage.config.grammar" />
      <arg value="-o" />
      <arg value="${gen}/condition-grammar.jtb" />
      <arg value="${condition}/condition-grammar.jj" />
    </java>
    
    <!-- Compile the annotated grammar into Java source code. -->
    <java 
        classpath="${library}/javacc-5.0.jar" classname="javacc" 
        failonerror="true">
        
      <arg value="-LOOKAHEAD=2" />
      <arg value="-OUTPUT_DIRECTORY=${gen}" />
      <arg value="${gen}/condition-grammar.jtb" />
    </java>
    
    <!-- Move the generated files into the 'gen' folder to keep them out of the
         way but persist them in case they need to be reviewed. -->
    <move file="syntaxtree" todir="${gen}" />
    <move file="visitor" todir="${gen}" />
    
    <!-- Tell the user what they must do now. -->
    <property name="grammar" location="${src}/org/ohmage/config/grammar" />
    <property name="parser" location="${grammar}/parser" />
    <property name="syntaxtree" location="${grammar}/syntaxtree" />
    <property name="visitor" location="${grammar}/grammar" />
    <echo>
TODO:
The Java source files have been generated and placed in condition/gen. To have
them build with the rest of the project, you must move the following objects to
the following places:
    - ${gen}/*.java -> ${parser}
    - ${gen}/syntaxtree/* -> ${syntaxtree}
    - ${gen}/visitor/* -> ${visitor}
The reason this wasn't done automatically is because it would overwrite any 
non-generated, custom code. While we highly discourage editing generated code,
we want to be safe just in case.
That said, JavaCC creates very ugly code. It is common for us to edit the code
by opening it in Eclipse and using Eclipse's aut-correct functionality to clean
it up and remove the warnings.</echo>
  </target>

  <target name="dist" depends="test, javac" description="Compiles Java files and creates WAR.">
    <mkdir dir="${dist}"/>
    <exec executable="git.cmd" outputproperty="git.revision" failifexecutionfails="true">
      <arg value="log"/>
      <arg value="--pretty=format:%h"/>
      <arg value="-1"/>
    </exec>
    <propertyfile file="system.properties" comment="This file is automatically generated - DO NOT EDIT!">
      <entry key="application.name" default="${app_name}"/>
      <entry key="application.version" default="${app_version}"/>
      <entry key="application.build" default="${git.revision}"/>
      <entry key="ssl.enabled" default="true"/>
    </propertyfile>
    <move file="system.properties" todir="web/WEB-INF/properties"/>
    <war webxml="${resources}/WEB-INF/web-ssl.xml" destfile="${dist}/${ant.project.name}-${app_version}.war">
      <classes dir="${build}/classes"/>
      <exclude name="**/*Test.java"/>
      <lib refid="run-dependencies"/>
      <webinf dir="${resources}/WEB-INF">
        <exclude name="web-no_ssl.xml"/>
        <exclude name="web-ssl.xml"/>
      </webinf>
      <metainf dir="${resources}/META-INF">
        <exclude name="MANIFEST.MF"/>
      </metainf>
      <zipfileset dir="${resources}">
        <exclude name="META-INF/**"/>
        <exclude name="WEB-INF/**"/>
      </zipfileset>
    </war>
  </target>

  <target name="dist-no_ssl" depends="test, javac" description="Compiles Java files and creates WAR.">
    <mkdir dir="${dist}"/>
    <exec executable="git.cmd" outputproperty="git.revision" failifexecutionfails="true">
      <arg value="log"/>
      <arg value="--pretty=format:%h"/>
      <arg value="-1"/>
    </exec>
    <propertyfile file="system.properties" comment="This file is automatically generated - DO NOT EDIT!">
      <entry key="application.name" default="${app_name}"/>
      <entry key="application.version" default="${app_version}"/>
      <entry key="application.build" default="${git.revision}"/>
      <entry key="ssl.enabled" default="false"/>
    </propertyfile>
    <move file="system.properties" todir="web/WEB-INF/properties"/>
    <war webxml="${resources}/WEB-INF/web-no_ssl.xml" destfile="${dist}/${ant.project.name}-${app_version}-no_ssl.war">
      <classes dir="${build}/classes"/>
      <exclude name="**/*Test.java"/>
      <lib refid="run-dependencies"/>
      <webinf dir="${resources}/WEB-INF">
        <exclude name="web-no_ssl.xml"/>
        <exclude name="web-ssl.xml"/>
      </webinf>
      <metainf dir="${resources}/META-INF">
        <exclude name="MANIFEST.MF"/>
      </metainf>
      <zipfileset dir="${resources}">
        <exclude name="META-INF/**"/>
        <exclude name="WEB-INF/**"/>
      </zipfileset>
    </war>
  </target>
    
  <target name="dist-validator" depends="javac-validator" 
        description="Compiles Java files and creates an executable jar file with the dependencies embedded.">
    <mkdir dir="${dist}"/>
    <jar destfile="${dist}/${app_name}-${app_version}-validator.jar">
      <fileset dir="${build}/classes">
        <include name="org/ohmage/config/**" />
        <include name="org/ohmage/util/StringUtils.class" />
      </fileset>
      <zipfileset src="${library}/json.org-2011-11-03.jar" excludes="META-INF/*" />
      <zipfileset src="${library}/log4j-1.2.16.jar" excludes="META-INF/*" />
      <zipfileset src="${library}/xom-1.2.6.jar" excludes="META-INF/*" />
      <zipfileset src="${library}/xercesImpl-2.11.0.jar" excludes="META-INF/*" />
      <manifest>
        <attribute name="Main-Class" value="org.ohmage.config.xml.CampaignValidator" />
      </manifest>
    </jar>
  </target>

  <target name="dist-library" depends="javac-library, javadoc-library"
        description="Compiles java files to create the library JAR.">
    <mkdir dir="${dist}"/>
    <jar destfile="${dist}/ohmage-${app_version}-api.jar">
      <fileset dir="${build}/classes">
        <include name="org/ohmage/domain/**" />
        <include name="org/ohmage/lib/**" />
        <include name="org/ohmage/util/**" />
        <include name="org/ohmage/exception/WorkflowException.java" />
        <include name="org/ohmage/exception/DomainException.java" />
        <exclude name="org/ohmage/domain/Audit.java" />
      </fileset>
      <fileset dir="${build}">
        <include name="docs/**" />
      </fileset>
      <zipfileset src="${library}/xom-1.2.6.jar" excludes="META-INF/*" />
      <zipfileset src="${library}/json.org-2011-11-03.jar" excludes="META-INF/*" />
      <zipfileset src="${library}/httpcore-4.1.2.jar" excludes="META-INF/*" />
      <zipfileset src="${library}/httpclient-4.1.2.jar" excludes="META-INF/*" />
      <zipfileset src="${library}/httpmime-4.1.2.jar" excludes="META-INF/*" />
      <zipfileset src="${library}/commons-logging-1.1.1.jar" excludes="META-INF/*" />
    </jar>
  </target>

  <target name="dist-docs" depends="javadoc" description="Compiles Javadocs and creates gzipped tarball.">
    <mkdir dir="${dist}"/>
    <tar basedir="${build}/docs" destfile="${dist}/${ant.project.name}-docs-${app_version}.tar.gz" longfile="gnu" compression="gzip"/>
    <zip basedir="${build}/docs" destfile="${dist}/${ant.project.name}-docs-${app_version}.zip" encoding="UTF-8" compress="true"/>
  </target>

  <target name="dist-all" depends="dist,dist-docs" description="Creates full distribution (WAR and docs)."/>
  <target name="dist-all-no_ssl" depends="dist-no_ssl,dist-docs" description="Creates full distribution (WAR and docs)."/>
  
  <target name="sonar">
    <sonar:sonar workDir="${user.home}/tmp" key="org.ohmage:example" version="${app_version}" xmlns:sonar="antlib:org.sonar.ant">
      <sources>
        <path location="${src}" />
      </sources>
      <property key="sonar.java.source" value="1.6" />
      <property key="sonar.java.target" value="1.6" />
    </sonar:sonar>
  </target>

    <!-- FAISAL: remote deployment stuff here -->
    <!-- Configure the directory into which the web application is built -->

    <!-- Configure the context path for this application -->
    <property name="path"     value="/app" />

    <!-- Configure properties to access the Manager application -->
    <property name="url"      value="http://hrungnir.dyndns.org:8080/manager/text" />
    <property name="username" value="falquaddoomi" />
    <property name="password" value="c10v3r" />
    <property name="warpath" value="${dist}/${ant.project.name}-${app_version}-no_ssl.war" />

    <!-- Configure the custom Ant tasks for the Manager application -->
    <taskdef name="deploy"    classname="org.apache.catalina.ant.DeployTask"/>
    <taskdef name="list"      classname="org.apache.catalina.ant.ListTask"/>
    <taskdef name="reload"    classname="org.apache.catalina.ant.ReloadTask"/>
    <taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask"/>
    <taskdef name="start"     classname="org.apache.catalina.ant.StartTask"/>
    <taskdef name="stop"      classname="org.apache.catalina.ant.StopTask"/>
    <taskdef name="undeploy"  classname="org.apache.catalina.ant.UndeployTask"/>

    <!-- Executable Targets -->
    <target name="tomcat:deploy" description="Install web application" depends="dist-no_ssl">
        <deploy url="${url}" username="${username}" password="${password}" path="${path}" war="file:${warpath}"/>
    </target>

    <target name="tomcat:redeploy" description="Install web application" depends="dist-no_ssl">
        <deploy url="${url}" update="true" username="${username}" password="${password}" path="${path}" war="file:${warpath}"/>
    </target>

    <target name="tomcat:reload" description="Reload web application">
        <reload  url="${url}" username="${username}" password="${password}" path="${path}"/>
    </target>

    <target name="tomcat:undeploy" description="Remove web application">
        <undeploy url="${url}" username="${username}" password="${password}" path="${path}"/>
    </target>
</project>