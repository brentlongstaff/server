<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
         
  <!--  Filters: executed in the order in which they are defined in this file, but specific to the filter-mappings -->
  
  <filter>
    <filter-name>LogoutFilter</filter-name>
    <filter-class>edu.ucla.cens.awserver.jee.filter.LogoutFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>LogoutFilter</filter-name>
    <url-pattern>/app/logout</url-pattern>
  </filter-mapping>
  
  <!--  Pushes the session id into the Log4J NDC for each request thread. The NDC is a Stack that is dumped to the log 
        for all Log4J messages.
  -->
  <filter>
    <filter-name>Log4jNdcFilter</filter-name>
    <filter-class>edu.ucla.cens.awserver.jee.filter.Log4jNdcFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>Log4jNdcFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping> 
  
  <!--  Enforces UTF-8 character encoding on all requests. --> 
  <filter>
    <filter-name>Utf8RequestEncodingFilter</filter-name>
    <filter-class>edu.ucla.cens.awserver.jee.filter.Utf8RequestEncodingFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>Utf8RequestEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
 
  <!--  Handles redirect back to login for an unauthenticated user accessing content that requires stateful authentication -->
  <filter>
    <filter-name>AuthenticationFilter</filter-name>
    <filter-class>edu.ucla.cens.awserver.jee.filter.AuthenticationFilter</filter-class>
    <init-param>
      <param-name>loginRedirectUrl</param-name>
      <param-value>/app/login.jsp</param-value>
    </init-param>
    <init-param>
      <param-name>loginServletUrl</param-name>
      <param-value>/app/login</param-value>
    </init-param>
    <init-param>
      <param-name>ajaxUrls</param-name>
      <!--  To add a URL, make this a comma-separated list -->
      <param-value>/app/viz</param-value>
    </init-param>
  </filter>
  
  <!--  Add filter mappings for whatever resources require authenticated access --> 
  <filter-mapping>
    <filter-name>AuthenticationFilter</filter-name>
    <servlet-name>EmaVizServlet</servlet-name>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AuthenticationFilter</filter-name>
    <servlet-name>jsp</servlet-name>
  </filter-mapping>
    
  <!-- Servlets.  Note that url-patterns are matched against initial (or re-dispatched) requests, not a request possiblty modified
       by filters.  -->

  <!--  The default Tomcat Servlet used to locate and serve static content -->
  <servlet>
    <servlet-name>default</servlet-name>
    <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
    <init-param>
      <param-name>debug</param-name>
      <param-value>0</param-value>
    </init-param>
    <init-param>
      <param-name>listings</param-name>
      <param-value>false</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  
  <!--  Add mappings for images, etc when necessary -->  
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.css</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.js</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.png</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.gif</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>/app/logout</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>/favicon.ico</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>/robots.txt</url-pattern>
  </servlet-mapping>

  <!-- The default Tomcat JSP Servlet. Requests for a JSP are dispatched here. -->
  <servlet>
    <servlet-name>jsp</servlet-name>
    <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>
    <init-param>
      <param-name>fork</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <param-name>xpoweredBy</param-name>
       <param-value>false</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
    <servlet-name>jsp</servlet-name>
    <url-pattern>*.jsp</url-pattern>
  </servlet-mapping>
    
  <!--  Login  -->
  <servlet>
    <description>
      Logs a user into the system. 
    </description>
    <servlet-name>Login</servlet-name>
    <servlet-class>edu.ucla.cens.awserver.jee.servlet.AwJspServlet</servlet-class>
    <init-param>
      <param-name>successfulRequestRedirectUrl</param-name>
      <param-value>/app/viz.jsp</param-value>
    </init-param>
    <init-param>
      <param-name>failedRequestRedirectUrl</param-name>
      <param-value>/app/login.jsp</param-value>
    </init-param>
    <!--  The following init-params are used to map the servlet to Spring-configured beans that ultimately service the request. 
          The param-value elements are Spring bean ids.    
    -->
    <init-param>
      <param-name>controllerName</param-name>
      <param-value>authenticationController</param-value>
    </init-param>
    <init-param>
      <param-name>awRequestCreatorName</param-name>
      <param-value>authenticationAwRequestCreator</param-value>
    </init-param>
    <init-param>
      <param-name>httpSessionModifierName</param-name>
      <param-value>authenticationHttpSessionModifier</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
    <servlet-name>Login</servlet-name>
    <url-pattern>/app/login</url-pattern>
  </servlet-mapping>
  
  <!--  Sensor Upload -->
  <servlet>
    <description>
      processes data uploads from a sensor (phone) 
    </description>
    <servlet-name>SensorUploadServlet</servlet-name>
    <servlet-class>edu.ucla.cens.awserver.jee.servlet.SensorUploadServlet</servlet-class>
    
    <!--  The following init-params are used to map the servlet to Spring-configured beans that ultimately service the request. 
          The param-value elements are Spring bean ids. -->  
    
    <init-param>
      <param-name>awRequestCreatorName</param-name>
      <param-value>sensorUploadAwRequestCreator</param-value>
    </init-param>
    
    <init-param>
      <param-name>controllerName</param-name>
      <param-value>sensorUploadController</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
    <servlet-name>SensorUploadServlet</servlet-name>
    <url-pattern>/app/sensor/upload</url-pattern>
  </servlet-mapping>
  
   <!--  Sensor Authentication - Initial Phone Login -->
  <servlet>
    <description>
      The first time a phone user logs in they use their default password. After this first login, they then must
      create a new password. The new password authenticates uploads (and any other future phone-server features). 
    </description>
    <servlet-name>SensorAuthServlet</servlet-name>
    <servlet-class>edu.ucla.cens.awserver.jee.servlet.SensorAuthServlet</servlet-class>
    
    <!--  The following init-params are used to map the servlet to Spring-configured beans that ultimately service the request. 
          The param-value elements are Spring bean ids. -->  
    
    <init-param>
      <param-name>awRequestCreatorName</param-name>
      <param-value>authenticationAwRequestCreator</param-value>
    </init-param>
    
    <init-param>
      <param-name>controllerName</param-name>
      <param-value>sensorAuthController</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
    <servlet-name>SensorAuthServlet</servlet-name>
    <url-pattern>/app/sensor/login</url-pattern>
  </servlet-mapping>
  
  <!--  Handle EMA Visualization Queries  -->
  <servlet>
    <description>
      Runs visualization queries for EMA (prompt/survey response) data. 
    </description>
    <servlet-name>EmaVizServlet</servlet-name>
    <servlet-class>edu.ucla.cens.awserver.jee.servlet.EmaVizServlet</servlet-class>
    <!--  The following init-params are used to map the servlet to Spring-configured beans that ultimately service the request. 
          The param-value elements are Spring bean ids.    
    -->
    <init-param>
      <param-name>controllerName</param-name>
      <param-value>emaVizController</param-value>
    </init-param>
    <init-param>
      <param-name>awRequestCreatorName</param-name>
      <param-value>emaVizAwRequestCreator</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
    <servlet-name>EmaVizServlet</servlet-name>
    <url-pattern>/app/viz</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
    <welcome-file>/app/login.jsp</welcome-file>
  </welcome-file-list>
   
  <error-page>
    <error-code>500</error-code>
    <location>/app/server_error.jsp</location>
  </error-page>
   
  <error-page>
    <error-code>404</error-code>
    <location>/app/file_not_found.html</location>
  </error-page>   
  
  <!-- Parameter with comma separated list of files (or patterns) that tells Spring where to pick up bean configurations. -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/spring/*.xml</param-value>
  </context-param>

  <!-- Bootstrap listener to initialize Log4J.  Having this one here (before Spring is bootstrapped with its ContextLoaderListener)
       ensures Log4J is configured before Spring spits out logging messages. -->
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>

  <!-- Bootstrap listener to start up Spring's root WebApplicationContext. Should be after the Log4jConfigListener if such is
       used. -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- Sets the webapp's session timeout (minutes). -->
  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>
</web-app>
